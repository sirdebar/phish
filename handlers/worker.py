import os
import logging
from datetime import datetime
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile

from handlers.states import WorkerStates
from handlers.utils import admin_ids, worker_profiles, generate_ref_link, referral_links

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("worker"))
async def cmd_worker(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /worker –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"""
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_profile")
    kb.adjust(1)
    
    await message.answer(
        "*üë∑‚Äç‚ôÇÔ∏è –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "create_profile")
async def process_create_profile(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    if user_id in worker_profiles:
        await callback.message.edit_text(
            "*‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞*\n\n"
            "*–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.*",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_worker"
            ).as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    await state.set_state(WorkerStates.waiting_for_photo)
    await callback.message.edit_text(
        "*üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –®–∞–≥ 1/4*\n\n"
        "*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è:*",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(WorkerStates.waiting_for_photo, F.photo)
async def process_profile_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_file_id = message.photo[-1].file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(photo_id=photo_file_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(WorkerStates.waiting_for_name)
    await message.answer(
        "*üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –®–∞–≥ 2/4*\n\n"
        "*–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã:*",
        parse_mode="Markdown"
    )

@router.message(WorkerStates.waiting_for_name, F.text)
async def process_profile_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = str(message.from_user.id)
    name = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(name=name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(WorkerStates.waiting_for_followers)
    await message.answer(
        "*üë• –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –®–∞–≥ 3/4*\n\n"
        "*–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:*",
        parse_mode="Markdown"
    )

@router.message(WorkerStates.waiting_for_followers, F.text)
async def process_profile_followers(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    user_id = str(message.from_user.id)
    followers = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(followers=followers)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(WorkerStates.waiting_for_photos_count)
    await message.answer(
        "*üñº –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –®–∞–≥ 4/4*\n\n"
        "*–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:*",
        parse_mode="Markdown"
    )

@router.message(WorkerStates.waiting_for_photos_count, F.text)
async def process_profile_photos_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ"""
    user_id = str(message.from_user.id)
    photos_count = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    name = data.get("name")
    followers = data.get("followers")
    photo_id = data.get("photo_id")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    now = datetime.now().strftime("%d.%m.%Y")
    
    profile_data = {
        "photo_id": photo_id,
        "name": name,
        "followers": followers,
        "photos_count": photos_count,
        "videos_count": "0",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "date": now,
        "verified": True
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    worker_profiles[user_id] = profile_data
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = generate_ref_link(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    await message.answer_photo(
        photo=photo_id,
        caption=(
            f"*‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üë© *–ò–º—è:* {name}\n"
            f"üßç *–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:* {followers}\n"
            f"üì∑ *–§–æ—Ç–æ:* {photos_count}\n"
            f"üé¶ *–í–∏–¥–µ–æ:* 0\n\n"
            f"üïî *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {now}\n"
            f"üìá *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞:* ‚úÖ\n\n"
            f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n"
            f"`{ref_link}`\n\n"
            f"_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–µ—Ä–µ—à–µ–¥—à–∏–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É._"
        ),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "delete_profile")
async def process_delete_profile(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if user_id not in worker_profiles:
        await callback.message.edit_text(
            "*‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã*\n\n"
            "*–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É.*",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_worker"
            ).as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏
    del worker_profiles[user_id]
    
    # –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –≤–æ—Ä–∫–µ—Ä–æ–º
    ref_codes_to_delete = []
    for ref_code, worker_id in referral_links.items():
        if worker_id == user_id:
            ref_codes_to_delete.append(ref_code)
    
    for ref_code in ref_codes_to_delete:
        del referral_links[ref_code]
    
    await callback.message.edit_text(
        "*‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞*\n\n"
        "*–í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.*",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_worker"
        ).as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_worker")
async def back_to_worker(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_profile")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "*üë∑‚Äç‚ôÇÔ∏è –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

def register_worker_router(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    dp.include_router(router) 