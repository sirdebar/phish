import os
import glob
import zipfile
import shutil
import logging
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.states import AdminStates
from handlers.utils import admin_ids, admin_notifications

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
@router.callback_query(F.data == "all_sessions")
async def show_all_sessions(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user_id) not in admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
    session_files = glob.glob("sessions/*.session")
    session_count = len(session_files)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    if session_count > 0:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        kb = InlineKeyboardBuilder()
        kb.button(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all_sessions")
        kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all_sessions")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        kb.adjust(1, 1, 1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = ""
        for i, session_file in enumerate(session_files, 1):
            user_id_from_file = os.path.basename(session_file).replace(".session", "")
            user_list += f"*{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:* `{user_id_from_file}`\n"
        
        await callback.message.edit_text(
            f"*üìÅ –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π ({session_count})*\n\n"
            f"{user_list}\n"
            f"*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–π –Ω–µ—Ç
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        
        await callback.message.edit_text(
            "*üìÇ –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø—É—Å—Ç*\n\n"
            "*–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.*",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
@router.callback_query(F.data == "download_all_sessions")
async def download_all_sessions(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ –≤–∏–¥–µ ZIP-–∞—Ä—Ö–∏–≤–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user_id) not in admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
    session_files = glob.glob("sessions/*.session")
    
    if not session_files:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    zip_path = "sessions/all_sessions.zip"
    with zipfile.ZipFile(zip_path, "w") as zipf:
        for file in session_files:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤ —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
            zipf.write(file, os.path.basename(file))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
    with open(zip_path, "rb") as file:
        await bot.send_document(
            user_id,
            types.BufferedInputFile(
                file.read(),
                filename="all_sessions.zip"
            ),
            caption="*üì• –ê—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Å–µ—Å—Å–∏—è–º–∏*",
            parse_mode="Markdown"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    if os.path.exists(zip_path):
        os.remove(zip_path)
    
    await callback.answer("–ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
@router.callback_query(F.data == "delete_all_sessions")
async def delete_all_sessions(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user_id) not in admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
    session_files = glob.glob("sessions/*.session")
    
    if not session_files:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
    for file in session_files:
        os.remove(file)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÅ –í—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="all_sessions")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if admin_notifications else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    kb.button(text=notification_text, callback_data="toggle_notifications")
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    kb.adjust(1)
    
    await callback.message.edit_text(
        "*üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "*‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer("–°–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
@router.callback_query(F.data.startswith("session_"))
async def process_session(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    user_id = callback.from_user.id
    if str(user_id) not in admin_ids:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
    session_user_id = callback.data.split("_")[1]
    session_path = f"sessions/{session_user_id}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="üì• –°–∫–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"download_session_{session_user_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Å—Å–∏—è–º", callback_data="all_sessions")
    kb.adjust(1)
    
    await callback.message.edit_text(
        f"*üë§ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{session_user_id}`\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
@router.callback_query(F.data.startswith("download_session_"))
async def process_download_session(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    user_id = callback.from_user.id
    if str(user_id) not in admin_ids:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
    session_user_id = callback.data.split("_")[2]
    session_path = f"sessions/{session_user_id}.session"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    if os.path.exists(session_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω—É
        with open(session_path, "rb") as file:
            await bot.send_document(
                user_id,
                types.BufferedInputFile(
                    file.read(),
                    filename=f"{session_user_id}.session"
                ),
                caption=f"*üìé –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{session_user_id}`",
                parse_mode="Markdown"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Å—Å–∏–∏", callback_data=f"session_{session_user_id}")
        
        await callback.message.edit_text(
            f"*‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{session_user_id}` *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞*",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Å—Å–∏—è–º", callback_data="all_sessions")
        
        await callback.message.edit_text(
            f"*‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{session_user_id}` *–Ω–µ –Ω–∞–π–¥–µ–Ω*",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery, state: FSMContext):
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user_id) not in admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    global admin_notifications
    admin_notifications = not admin_notifications
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÅ –í—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="all_sessions")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if admin_notifications else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    kb.button(text=notification_text, callback_data="toggle_notifications")
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    kb.adjust(1)
    
    notification_status = "–≤–∫–ª—é—á–µ–Ω—ã" if admin_notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    await callback.message.edit_text(
        "*üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        f"*‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_status}*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_status}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user_id) not in admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÅ –í—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="all_sessions")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if admin_notifications else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    kb.button(text=notification_text, callback_data="toggle_notifications")
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    kb.adjust(1)
    
    await callback.message.edit_text(
        "*üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()

def register_admin_router(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    dp.include_router(router) 